=DSL Specification

This is almost completely implemented:

  class User
    attr_accessor :name, :login, :password, :email
    def initialize(name, login, password, email)
      @name, @login, @password, @email = name, login, password, email
    end
  end

  class Session
    attr_accessor :id
    def initialize(id)
      @id = id
    end
  end

  class Cart
    attr_accessor :items
  
    def initialize(*items)
      @items = [items].flatten
    end
  
    def total
      @items.inject(0) do |total, line_item|
        total += line_item.total
      end 
    end
  end

  class LineItem
    attr_accessor :name, :description, :quantity, :item_price
    def initialize(name, description, price, quantity)
      @name, @description, @price, @quantity = name, description, price, quantity
    end
    def full_price
      @price * @quantity
    end
  end

  receipt = <<-RECEIPT
  <p><r:user:name />, thank you for shopping with us! An order summary
    is printed below for your convenience. Please print a copy for your records.</p>
  <r:cart>
    <table>
      <thead>
        <tr>
          <td>Product</td>
          <td>Price</td>
          <td>Quantity</td>
          <td>Totals</td>
        </tr>
      </thead>
      <tbody>
        <r:items:each>
          <tr>
            <td>
              <strong><r:item:name /></strong><br >
              <r:item:description />
            </td>
            <td><r:item:price /></td>
            <td><r:item:quantity /></td>
            <td><r:item:full_price /></td>
          </tr>
        </r:items:each>
      </tbody>
      <tr>
        <td colspan="3">Total</td>
        <td><r:total /></td>
      </tr>
    </table>
  </r:cart>
  RECEIPT

  user = User.new('John', 'johnboy', 'm@x!mu5', 'johnboy@maximus.com')
  cart = Cart.new(
    LineItem.new('15in PowerBook', "Apple's premium notebook computer.", 1995.98, 1),
    LineItem.new('Mac Notebook Case', "A beautiful black notebook case designed for Apple Powerbooks.", 54.05, 1)
  )
  session = Session.new('a4bd386e512bacd581')

  context = Radius::Context.define do |r|
    r.tag "user", :for => user :expose => [:name, :login, :email]
    r.tag "user:session", :for => session, :expose => :id
    r.tag "user:password" do
      "*" * user.password.size
    end
    r.tag "basket", :for => cart, :expose => :total
    r.tag "basket:items", :for => proc { cart.items }, :type => :enumerable, :item_expose => [:name, :description, :quantity, :price]
  end

  parser = Radius::Parser.new(context)
  puts parser.parse(receipt) # compiles and outputs expanded template

  # another alternative
  puts Radius.parse(receipt, context)
  
  
  # Some scratch code from Radiant CMS:
  
  page = Page.new
  
  context = Radius::Context.new do |c|
    c.define_tag "page", :for => page
    c.define_tag "page:children", :for => page.children, :item_tag => 'child', :type => :collection
    c.define_tag "link" do |tag|
      if (tag.nesting ~= /children/) or (tag.name ~= /^page:link$/ )
        %{<a href=#{ tag.item_for('child').url }">} + tag.expand + %{</a>}
      else
        %{<a href=#{ page.url }">} + tag.expand + %{</a>}
      end
    end
  end
  
  
  <r:page>
    <r:title /> => "Page Title"
    <r:find url="/en/news/">
      <r:title /> => "News Archives"
      <r:page:title /> => "Page Title"
      <r:children:each> => News archives children

      </r:children:each>
    <r:find>
  </r:page>

  <r:page:find_all match="/en/news/*/">
    <r:page:title />
  </r:page:find>

  define_tag "page" do |tag|
    tag.local.page = @page
    tag.expand
  end

  define_tag "page:find" do |tag|
    tag.local.page = result_of_find
    tag.expand
  end
  
  define_tag "page:children" do |tag|
    tag.local.children = tag.local.page.children
    tag.expand
  end
  
  define_tag "page:children:each" do |tag|
    children = tag.local.children
    result = ''
    children.each do |child|
      tag.local.page = child
      result << tag.expand
    end
    result
  end

  define_tag "page:title" do |tag|
    page = tag.local.page
    page.title
  end

= Shorthand

The short hand form of a tag:

  <r:page:title />

Should be the equivalent of saying:

  <r:page><r:title /></r:page>
  

= Specificity  
  
Given the following tag definitions:

  nesting
  extra:nesting
  parent:child:nesting

And the following in a template:

  <r:parent:extra:child:nesting />

The following specificity values should be assigned to each of the tags:

  nesting => 1.0.0.0
  extra:nesting => 1.0.1.0
  parent:child:nesting => 1.1.0.1

Meaning that the parent:child:nesting tag should win. In the case of the following
tag in a template:

  <r:parent:child:extra:nesting />

The following specificity values should be assigned to each of the tags:

  nesting => 1.0.0.0
  extra:nesting => 1.1.0.0
  parent:child:nesting => 1.0.1.1

Meaning that extra:nesting would win because it is more "specific".

Values are assigned by assigning point values to each of the tags from right to
left. Given a tag found in a template with nesting four levels deep, the maximum
specificity a tag could be assigned would be:

  1.1.1.1

One point for each of the levels. In the first example above, this would be a tag
defined for:

  parent:extra:child:nesting

When looking up a tag, specificity values should be calculated for all tags
(which could apply in the current situation), and then the one with the highest
value should be returned.

