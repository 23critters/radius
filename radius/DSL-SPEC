=DSL Specification

This is almost completely implemented:

  class User
    attr_accessor :name, :login, :password, :email
    def initialize(name, login, password, email)
      @name, @login, @password, @email = name, login, password, email
    end
  end

  class Session
    attr_accessor :id
    def initialize(id)
      @id = id
    end
  end

  class Cart
    attr_accessor :items
  
    def initialize(*items)
      @items = [items].flatten
    end
  
    def total
      @items.inject(0) do |total, line_item|
        total += line_item.total
      end 
    end
  end

  class LineItem
    attr_accessor :name, :description, :quantity, :item_price
    def initialize(name, description, price, quantity)
      @name, @description, @price, @quantity = name, description, price, quantity
    end
    def full_price
      @price * @quantity
    end
  end

  receipt = <<-RECEIPT
  <p><r:user:name />, thank you for shopping with us! An order summary
    is printed below for your convenience. Please print a copy for your records.</p>
  <r:cart>
    <table>
      <thead>
        <tr>
          <td>Product</td>
          <td>Price</td>
          <td>Quantity</td>
          <td>Totals</td>
        </tr>
      </thead>
      <tbody>
        <r:items:each>
          <tr>
            <td>
              <strong><r:item:name /></strong><br >
              <r:item:description />
            </td>
            <td><r:item:price /></td>
            <td><r:item:quantity /></td>
            <td><r:item:full_price /></td>
          </tr>
        </r:items:each>
      </tbody>
      <tr>
        <td colspan="3">Total</td>
        <td><r:total /></td>
      </tr>
    </table>
  </r:cart>
  RECEIPT

  user = User.new('John', 'johnboy', 'm@x!mu5', 'johnboy@maximus.com')
  cart = Cart.new(
    LineItem.new('15in PowerBook', "Apple's premium notebook computer.", 1995.98, 1),
    LineItem.new('Mac Notebook Case', "A beautiful black notebook case designed for Apple Powerbooks.", 54.05, 1)
  )
  session = Session.new('a4bd386e512bacd581')

  context = Radius::Context.define do |r|
    r.tag "user", :for => user :expose => [:name, :login, :email]
    r.tag "user:session", :for => session, :expose => :id
    r.tag "user:password" do
      "*" * user.password.size
    end
    r.tag "basket", :for => cart, :expose => :total
    r.tag "basket:items", :for => proc { cart.items }, :type => :enumerable, :item_expose => [:name, :description, :quantity, :price]
  end

  parser = Radius::Parser.new(context)
  puts parser.parse(receipt) # compiles and outputs expanded template

  # another alternative
  puts Radius.parse(receipt, context)
  
  
  # Some scratch code from Radiant CMS:
  
  page = Page.new
  
  context = Radius::Context.new do |c|
    c.define_tag "page", :for => page
    c.define_tag "page:children", :for => page.children, :item_tag => 'child', :type => :collection
    c.define_tag "link" do |tag|
      if (tag.nesting ~= /children/) or (tag.name ~= /^page:link$/ )
        %{<a href=#{ tag.item_for('child').url }">} + tag.expand + %{</a>}
      else
        %{<a href=#{ page.url }">} + tag.expand + %{</a>}
      end
    end
  end